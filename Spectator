--[[
	═══════════════════════════════════════════════════════════════════════
	ROBLOX PLAYER SPECTATOR SCRIPT
	═══════════════════════════════════════════════════════════════════════
	
	Version: 2.1 (Fixed - Hide All Players)
	Author: ItoRenz00
	License: MIT
	
	Description:
		A comprehensive spectator system that allows players to observe others
		with a clean, distraction-free view. Automatically hides all player
		GUIs including nametags, health bars, and overhead elements.
	
	Installation:
		Place this script in StarterGui as a LocalScript
	
	Features:
		• Toggle spectator mode with eye icon button
		• Navigate between players with arrow buttons
		• Hides ALL players' GUIs during spectate mode
		• Mobile and PC support with adaptive UI
		• Automatic player list management
		• Proper state restoration on exit
	
	═══════════════════════════════════════════════════════════════════════
--]]

--[[═══════════════════════════════════════════════════════════════════════
	SERVICES & REFERENCES
═══════════════════════════════════════════════════════════════════════--]]

local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local StarterGui = game:GetService("StarterGui")

local player = Players.LocalPlayer
local camera = workspace.CurrentCamera
local originalCameraSubject = camera.CameraSubject

--[[═══════════════════════════════════════════════════════════════════════
	STATE MANAGEMENT
═══════════════════════════════════════════════════════════════════════--]]

local isSpectating = false
local currentSpectateIndex = 1
local spectateList = {}

-- UI state tracking
local coreGuisEnabled = {}
local hiddenCustomGuis = {}

-- Per-player GUI state storage
local hiddenObjectsPerPlayer = {}

-- Device detection
local isMobile = UserInputService.TouchEnabled and not UserInputService.MouseEnabled

--[[═══════════════════════════════════════════════════════════════════════
	GUI MANAGEMENT FUNCTIONS
═══════════════════════════════════════════════════════════════════════--]]

--[[
	Hide or restore GUI elements on a player's character
	@param character - The character model to modify
	@param hide - Boolean: true to hide, false to restore
--]]
local function togglePlayerGui(character, hide)
	if not character then return end
	
	local targetPlayer = Players:GetPlayerFromCharacter(character)
	if not targetPlayer then return end
	
	local playerUserId = targetPlayer.UserId
	
	-- Initialize storage for this player
	if not hiddenObjectsPerPlayer[playerUserId] then
		hiddenObjectsPerPlayer[playerUserId] = {}
	end
	
	local success, err = pcall(function()
		local head = character:FindFirstChild("Head")
		if not head then return end
		
		-- Process BillboardGui elements
		for _, descendant in pairs(character:GetDescendants()) do
			if descendant:IsA("BillboardGui") then
				if hide then
					-- Store original state only once
					if hiddenObjectsPerPlayer[playerUserId][descendant] == nil then
						hiddenObjectsPerPlayer[playerUserId][descendant] = descendant.Enabled
					end
					descendant.Enabled = false
				else
					-- Restore original state
					if hiddenObjectsPerPlayer[playerUserId][descendant] ~= nil then
						descendant.Enabled = hiddenObjectsPerPlayer[playerUserId][descendant]
					end
				end
			end
		end
		
		-- Process Humanoid display (nametag and health bar)
		local humanoid = character:FindFirstChildOfClass("Humanoid")
		if humanoid then
			if hide then
				if hiddenObjectsPerPlayer[playerUserId]["humanoidDisplay"] == nil then
					hiddenObjectsPerPlayer[playerUserId]["humanoidDisplay"] = humanoid.DisplayDistanceType
				end
				humanoid.DisplayDistanceType = Enum.HumanoidDisplayDistanceType.None
			else
				if hiddenObjectsPerPlayer[playerUserId]["humanoidDisplay"] then
					humanoid.DisplayDistanceType = hiddenObjectsPerPlayer[playerUserId]["humanoidDisplay"]
				end
			end
		end
		
		-- Process text elements and SurfaceGuis in Head
		for _, obj in pairs(head:GetDescendants()) do
			-- Handle text UI elements
			if obj:IsA("TextLabel") or obj:IsA("TextButton") or obj:IsA("TextBox") then
				if hide then
					if hiddenObjectsPerPlayer[playerUserId][obj] == nil then
						hiddenObjectsPerPlayer[playerUserId][obj] = obj.Visible
					end
					obj.Visible = false
				else
					if hiddenObjectsPerPlayer[playerUserId][obj] ~= nil then
						obj.Visible = hiddenObjectsPerPlayer[playerUserId][obj]
					end
				end
			end
			
			-- Handle SurfaceGui elements
			if obj:IsA("SurfaceGui") then
				if hide then
					if hiddenObjectsPerPlayer[playerUserId][obj] == nil then
						hiddenObjectsPerPlayer[playerUserId][obj] = obj.Enabled
					end
					obj.Enabled = false
				else
					if hiddenObjectsPerPlayer[playerUserId][obj] ~= nil then
						obj.Enabled = hiddenObjectsPerPlayer[playerUserId][obj]
					end
				end
			end
		end
	end)
	
	if not success and err then
		warn("[Spectator] Error in togglePlayerGui:", err)
	end
end

--[[
	Hide GUI elements for ALL players in the game
--]]
local function hideAllPlayersGui()
	for _, p in pairs(Players:GetPlayers()) do
		if p.Character then
			togglePlayerGui(p.Character, true)
		end
	end
end

--[[
	Restore GUI elements for ALL players in the game
--]]
local function showAllPlayersGui()
	for _, p in pairs(Players:GetPlayers()) do
		if p.Character then
			togglePlayerGui(p.Character, false)
		end
	end
end

--[[═══════════════════════════════════════════════════════════════════════
	UI CREATION
═══════════════════════════════════════════════════════════════════════--]]

--[[
	Create the spectator GUI interface
	@return screenGui, toggleButton, prevButton, nextButton, infoLabel
--]]
local function createSpectatorGUI()
	-- Main screen GUI container
	local screenGui = Instance.new("ScreenGui")
	screenGui.Name = "SpectatorGUI"
	screenGui.ResetOnSpawn = false
	screenGui.Parent = player.PlayerGui
	
	-- Toggle button (Eye icon)
	local toggleButton = Instance.new("TextButton")
	toggleButton.Name = "ToggleButton"
	toggleButton.Text = "👁️"
	toggleButton.Font = Enum.Font.GothamBold
	toggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
	toggleButton.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
	toggleButton.BorderSizePixel = 0
	
	-- Device-specific sizing
	if isMobile then
		toggleButton.Size = UDim2.new(0, 25, 0, 25)
		toggleButton.Position = UDim2.new(1, -35, 0.5, -110)
		toggleButton.TextSize = 20
	else
		toggleButton.Size = UDim2.new(0, 30, 0, 30)
		toggleButton.Position = UDim2.new(1, -35, 0.5, -200)
		toggleButton.TextSize = 25
	end
	
	toggleButton.Parent = screenGui
	
	-- Rounded corners for toggle button
	local toggleCorner = Instance.new("UICorner")
	toggleCorner.CornerRadius = UDim.new(0, 15)
	toggleCorner.Parent = toggleButton
	
	-- Previous player button
	local prevButton = Instance.new("TextButton")
	prevButton.Name = "PrevButton"
	prevButton.Text = "◀"
	prevButton.Font = Enum.Font.GothamBold
	prevButton.TextColor3 = Color3.fromRGB(255, 255, 255)
	prevButton.BackgroundTransparency = 1
	prevButton.BorderSizePixel = 0
	prevButton.Visible = false
	
	if isMobile then
		prevButton.Size = UDim2.new(0, 50, 0, 60)
		prevButton.Position = UDim2.new(0, 10, 0.5, -30)
		prevButton.TextSize = 32
	else
		prevButton.Size = UDim2.new(0, 60, 0, 80)
		prevButton.Position = UDim2.new(0, 15, 0.5, -40)
		prevButton.TextSize = 40
	end
	
	prevButton.Parent = screenGui
	
	-- Next player button
	local nextButton = Instance.new("TextButton")
	nextButton.Name = "NextButton"
	nextButton.Text = "▶"
	nextButton.Font = Enum.Font.GothamBold
	nextButton.TextColor3 = Color3.fromRGB(255, 255, 255)
	nextButton.BackgroundTransparency = 1
	nextButton.BorderSizePixel = 0
	nextButton.Visible = false
	
	if isMobile then
		nextButton.Size = UDim2.new(0, 50, 0, 60)
		nextButton.Position = UDim2.new(1, -60, 0.5, -30)
		nextButton.TextSize = 32
	else
		nextButton.Size = UDim2.new(0, 60, 0, 80)
		nextButton.Position = UDim2.new(1, -75, 0.5, -40)
		nextButton.TextSize = 40
	end
	
	nextButton.Parent = screenGui
	
	-- Info label (displays current spectated player)
	local infoLabel = Instance.new("TextLabel")
	infoLabel.Name = "InfoLabel"
	infoLabel.Text = ""
	infoLabel.Font = Enum.Font.GothamBold
	infoLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
	infoLabel.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
	infoLabel.BackgroundTransparency = 0.5
	infoLabel.BorderSizePixel = 0
	infoLabel.Visible = false
	
	if isMobile then
		infoLabel.Size = UDim2.new(0, 240, 0, 20)
		infoLabel.Position = UDim2.new(0.5, -120, 0.85, 20)
		infoLabel.TextSize = 14
	else
		infoLabel.Size = UDim2.new(0, 280, 0, 30)
		infoLabel.Position = UDim2.new(0.5, -140, 0.85, 60)
		infoLabel.TextSize = 16
	end
	
	infoLabel.Parent = screenGui
	
	-- Rounded corners for info label
	local infoCorner = Instance.new("UICorner")
	infoCorner.CornerRadius = UDim.new(0, 10)
	infoCorner.Parent = infoLabel
	
	return screenGui, toggleButton, prevButton, nextButton, infoLabel
end

--[[═══════════════════════════════════════════════════════════════════════
	CORE UI FUNCTIONS
═══════════════════════════════════════════════════════════════════════--]]

--[[
	Hide all CoreGUI elements and custom ScreenGuis
--]]
local function hideGameUI()
	local coreGuiTypes = {
		Enum.CoreGuiType.Health,
		Enum.CoreGuiType.Backpack,
		Enum.CoreGuiType.Chat,
		Enum.CoreGuiType.EmotesMenu
	}
	
	-- Hide CoreGui elements
	for _, guiType in pairs(coreGuiTypes) do
		pcall(function()
			local isEnabled = StarterGui:GetCoreGuiEnabled(guiType)
			coreGuisEnabled[guiType] = isEnabled
			if isEnabled then
				StarterGui:SetCoreGuiEnabled(guiType, false)
			end
		end)
	end
	
	-- Hide custom ScreenGuis (except SpectatorGUI)
	for _, gui in pairs(player.PlayerGui:GetChildren()) do
		if gui:IsA("ScreenGui") and gui.Name ~= "SpectatorGUI" then
			hiddenCustomGuis[gui] = gui.Enabled
			gui.Enabled = false
		end
	end
end

--[[
	Restore all CoreGUI elements and custom ScreenGuis
--]]
local function showGameUI()
	-- Restore CoreGui elements
	for guiType, wasEnabled in pairs(coreGuisEnabled) do
		pcall(function()
			if wasEnabled then
				StarterGui:SetCoreGuiEnabled(guiType, true)
			end
		end)
	end
	
	-- Restore custom ScreenGuis
	for gui, wasEnabled in pairs(hiddenCustomGuis) do
		pcall(function()
			if gui and gui.Parent then
				gui.Enabled = wasEnabled
			end
		end)
	end
	
	-- Clear state tracking
	coreGuisEnabled = {}
	hiddenCustomGuis = {}
end

--[[═══════════════════════════════════════════════════════════════════════
	SPECTATOR CORE FUNCTIONS
═══════════════════════════════════════════════════════════════════════--]]

--[[
	Update the list of spectatable players
--]]
local function updateSpectateList()
	spectateList = {}
	for _, p in pairs(Players:GetPlayers()) do
		if p.Character and p.Character:FindFirstChild("Humanoid") then
			table.insert(spectateList, p)
		end
	end
end

--[[
	Begin spectating a specific player
	@param targetPlayer - The player to spectate
	@return boolean - Success status
--]]
local function spectatePlayer(targetPlayer)
	if not (targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("Humanoid")) then
		return false
	end
	
	-- Set camera to target player
	camera.CameraSubject = targetPlayer.Character.Humanoid
	
	-- Hide all players' GUIs
	task.wait(0.1)
	hideAllPlayersGui()
	
	-- Setup dynamic GUI hiding for all players
	for _, p in pairs(Players:GetPlayers()) do
		if p.Character then
			p.Character.DescendantAdded:Connect(function(descendant)
				if not isSpectating then return end
				
				task.wait(0.1)
				pcall(function()
					local playerUserId = p.UserId
					
					-- Initialize storage if needed
					if not hiddenObjectsPerPlayer[playerUserId] then
						hiddenObjectsPerPlayer[playerUserId] = {}
					end
					
					-- Handle BillboardGui and SurfaceGui
					if descendant:IsA("BillboardGui") or descendant:IsA("SurfaceGui") then
						hiddenObjectsPerPlayer[playerUserId][descendant] = descendant.Enabled
						descendant.Enabled = false
					end
					
					-- Handle text elements in Head
					if descendant:IsA("TextLabel") or descendant:IsA("TextButton") or descendant:IsA("TextBox") then
						local head = p.Character:FindFirstChild("Head")
						if head and descendant:IsDescendantOf(head) then
							hiddenObjectsPerPlayer[playerUserId][descendant] = descendant.Visible
							descendant.Visible = false
						end
					end
				end)
			end)
		end
	end
	
	return true
end

--[[
	Stop spectating and restore all states
--]]
local function stopSpectating()
	print("[Spectator] Stopping spectate mode, restoring all GUIs...")
	
	-- Restore all players' GUIs
	showAllPlayersGui()
	
	-- Clear all stored state
	hiddenObjectsPerPlayer = {}
	
	-- Reset camera to local player
	if player.Character and player.Character:FindFirstChild("Humanoid") then
		camera.CameraSubject = player.Character.Humanoid
	else
		camera.CameraSubject = originalCameraSubject
	end
	
	-- Update state
	isSpectating = false
	
	-- Restore game UI
	showGameUI()
	
	print("[Spectator] All states restored successfully!")
end

--[[═══════════════════════════════════════════════════════════════════════
	GUI EVENT HANDLERS
═══════════════════════════════════════════════════════════════════════--]]

-- Create GUI elements
local gui, toggleBtn, prevBtn, nextBtn, infoLabel = createSpectatorGUI()

--[[
	Toggle spectator mode on/off
--]]
toggleBtn.MouseButton1Click:Connect(function()
	isSpectating = not isSpectating
	
	if isSpectating then
		-- Entering spectator mode
		updateSpectateList()
		
		if #spectateList > 0 then
			currentSpectateIndex = 1
			
			if spectatePlayer(spectateList[currentSpectateIndex]) then
				-- Hide game UI
				hideGameUI()
				
				-- Update toggle button appearance
				toggleBtn.BackgroundColor3 = Color3.fromRGB(200, 50, 50)
				
				-- Show navigation controls
				prevBtn.Visible = true
				nextBtn.Visible = true
				infoLabel.Visible = true
				
				-- Display current player info
				local targetPlayer = spectateList[currentSpectateIndex]
				infoLabel.Text = targetPlayer.DisplayName .. " (@" .. targetPlayer.Name .. ")"
			else
				isSpectating = false
			end
		else
			-- No players available
			isSpectating = false
			infoLabel.Visible = true
			infoLabel.Text = "No players to spectate!"
			task.wait(2)
			infoLabel.Visible = false
		end
	else
		-- Exiting spectator mode
		stopSpectating()
		
		-- Reset toggle button appearance
		toggleBtn.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
		
		-- Hide navigation controls
		prevBtn.Visible = false
		nextBtn.Visible = false
		infoLabel.Visible = false
	end
end)

--[[
	Navigate to previous player
--]]
prevBtn.MouseButton1Click:Connect(function()
	if not (isSpectating and #spectateList > 0) then return end
	
	updateSpectateList()
	
	-- Cycle to previous player
	currentSpectateIndex = currentSpectateIndex - 1
	if currentSpectateIndex < 1 then
		currentSpectateIndex = #spectateList
	end
	
	-- Spectate the new player
	if spectatePlayer(spectateList[currentSpectateIndex]) then
		local targetPlayer = spectateList[currentSpectateIndex]
		infoLabel.Text = targetPlayer.DisplayName .. " (@" .. targetPlayer.Name .. ")"
	end
end)

--[[
	Navigate to next player
--]]
nextBtn.MouseButton1Click:Connect(function()
	if not (isSpectating and #spectateList > 0) then return end
	
	updateSpectateList()
	
	-- Cycle to next player
	currentSpectateIndex = currentSpectateIndex + 1
	if currentSpectateIndex > #spectateList then
		currentSpectateIndex = 1
	end
	
	-- Spectate the new player
	if spectatePlayer(spectateList[currentSpectateIndex]) then
		local targetPlayer = spectateList[currentSpectateIndex]
		infoLabel.Text = targetPlayer.DisplayName .. " (@" .. targetPlayer.Name .. ")"
	end
end)

--[[═══════════════════════════════════════════════════════════════════════
	GAME EVENT LISTENERS
═══════════════════════════════════════════════════════════════════════--]]

--[[
	Handle player leaving the game
--]]
Players.PlayerRemoving:Connect(function(removedPlayer)
	if not isSpectating then return end
	
	-- Clean up removed player's data
	if removedPlayer then
		hiddenObjectsPerPlayer[removedPlayer.UserId] = nil
	end
	
	-- Update spectate list
	updateSpectateList()
	
	if #spectateList == 0 then
		-- No players left, exit spectator mode
		stopSpectating()
		toggleBtn.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
		prevBtn.Visible = false
		nextBtn.Visible = false
		infoLabel.Visible = false
	elseif spectateList[currentSpectateIndex] == removedPlayer then
		-- Currently spectating the removed player, switch to first available
		currentSpectateIndex = 1
		if currentSpectateIndex <= #spectateList then
			spectatePlayer(spectateList[currentSpectateIndex])
			local targetPlayer = spectateList[currentSpectateIndex]
			infoLabel.Text = targetPlayer.DisplayName .. " (@" .. targetPlayer.Name .. ")"
		end
	end
end)

--[[
	Handle new player joining the game
--]]
Players.PlayerAdded:Connect(function(newPlayer)
	newPlayer.CharacterAdded:Connect(function(character)
		if isSpectating then
			task.wait(0.5)
			-- Hide the new player's GUI if we're spectating
			togglePlayerGui(character, true)
		end
	end)
end)

--[[
	Handle local player respawn
--]]
player.CharacterAdded:Connect(function(character)
	if not isSpectating then
		-- Restore all players' GUIs when local player respawns
		showAllPlayersGui()
	end
end)

--[[═══════════════════════════════════════════════════════════════════════
	INITIALIZATION
═══════════════════════════════════════════════════════════════════════--]]

print("═══════════════════════════════════════════════════════════════")
print("✓ Spectator Script Loaded Successfully!")
print("✓ Version: 2.1")
print("✓ Device: " .. (isMobile and "Mobile" or "PC"))
print("✓ Feature: Hides ALL players' GUIs during spectate")
print("═══════════════════════════════════════════════════════════════")
